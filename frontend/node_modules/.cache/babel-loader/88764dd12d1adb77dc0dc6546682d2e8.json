{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WinUser\\\\PycharmProjects\\\\predictit2020\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport USAMap from \"react-usa-map\";\nimport ELECTORAL_VOTES from \"./electoral_votes\";\nimport { Button, TextField } from \"@material-ui/core\";\n\nfunction getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i]; // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(1, name.length + 1) === name) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 2));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nconst getParamsFromURL = paramsStr => {\n  let parameters = {};\n  if (paramsStr) paramsStr.split(\"?\")[1].split(\"&\").forEach(part => {\n    let item = part.split(\"=\");\n    parameters[item[0]] = decodeURIComponent(item[1]);\n  });\n  return parameters;\n};\n\nfunction App(props) {\n  const [loadingStatus, setLoadingStatus] = React.useState(0);\n  const [states, setStates] = React.useState({});\n  const [electoralVotes, setElectoralVotes] = React.useState({\n    democrats: 0,\n    republicans: 0\n  });\n  const [saveMessage, setSaveMessage] = React.useState(\"\");\n  const [baseUrl, setBaseUrl] = React.useState(\"\");\n  const [shareUrl, setShareUrl] = React.useState(\"\");\n  const [copied, setCopied] = React.useState(false);\n  const [username, setUsername] = React.useState(undefined);\n  const isFilled = Object.keys(states).length == 51;\n  console.log(Object.keys(states).length);\n  const today = new Date();\n  const canSave = today < new Date(2020, 10, 3);\n  const viewId = getParamsFromURL(props.location.search)['view_id'];\n  React.useEffect(() => {\n    const fetchUserPrediction = async () => {\n      let res;\n      if (!viewId) res = await fetch(`/load/`);else res = await fetch(`/load/?view_id=${viewId}`);\n      if (res.status === 403) setLoadingStatus(2);else {\n        const raw_data = await res.json();\n        const base_url = raw_data.base_url;\n        setBaseUrl(base_url);\n        let json_data = JSON.parse(raw_data.prediction);\n        setShareUrl(`${base_url}/static/build/index.html?view_id=${json_data.id}`);\n        setUsername(raw_data.username);\n        delete json_data.username;\n        delete json_data.id;\n        delete json_data.user;\n        json_data.ID = json_data.IDA;\n        delete json_data.IDA;\n        setElectoralVotes({\n          democrats: json_data.electoral_votes_dem,\n          republicans: json_data.electoral_votes_rep\n        });\n        delete json_data.electoral_votes_dem;\n        delete json_data.electoral_votes_rep;\n        setStates(json_data);\n        setLoadingStatus(1);\n      }\n    };\n\n    fetchUserPrediction();\n  }, []);\n\n  const mapHandler = event => {\n    if (!viewId) {\n      setSaveMessage(\"\");\n      const stateId = event.target.dataset.name == 'DC' ? 'DC2' : event.target.dataset.name;\n      let newStates = JSON.parse(JSON.stringify(states));\n\n      if (stateId in newStates) {\n        if (newStates[stateId].fill === 'navy') {\n          newStates[stateId].fill = 'red';\n          setElectoralVotes({\n            democrats: electoralVotes.democrats - ELECTORAL_VOTES[stateId],\n            republicans: electoralVotes.republicans + ELECTORAL_VOTES[stateId]\n          });\n        } else {\n          newStates[stateId].fill = 'navy';\n          setElectoralVotes({\n            democrats: electoralVotes.democrats + ELECTORAL_VOTES[stateId],\n            republicans: electoralVotes.republicans - ELECTORAL_VOTES[stateId]\n          });\n        }\n      } else {\n        newStates[stateId] = {\n          'fill': 'navy'\n        };\n        setElectoralVotes({ ...electoralVotes,\n          democrats: electoralVotes.democrats + ELECTORAL_VOTES[stateId]\n        });\n      }\n\n      setStates(newStates);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, loadingStatus === 0 ? \"Loading\" : loadingStatus === 2 ? \"Not Logged in properly, or invalid ID, unable to load\" : loadingStatus === 1 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      left: \"0px\",\n      top: \"10px\",\n      height: '40px',\n      width: `${electoralVotes.republicans / 538 * 100}%`,\n      background: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      right: \"0px\",\n      top: \"10px\",\n      height: '40px',\n      width: `${electoralVotes.democrats / 538 * 100}%`,\n      background: \"navy\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      left: \"5%\",\n      top: \"0px\",\n      color: '#999'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, \"Republicans: \", electoralVotes.republicans)), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      right: \"5%\",\n      top: \"0px\",\n      color: '#999'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, \"Democrats: \", electoralVotes.democrats)), viewId !== undefined && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingTop: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }, username, \"'s map\")), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingTop: '100px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(USAMap, {\n    customize: states,\n    onClick: mapHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }))), canSave ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, viewId === undefined && /*#__PURE__*/React.createElement(Button, {\n    onClick: async ev => {\n      const res = await fetch(`/save/`, {\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'X-CSRFToken': getCookie(\"csrftoken\"),\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          states: states,\n          electoralVotes: electoralVotes\n        })\n      });\n      if (res.status === 200) setSaveMessage(\"Saved! You're all set! (You can modify it until November 3rd)\");else setSaveMessage(\"Did not save properly!  Please try clicking save again\");\n    },\n    variant: \"contained\",\n    disabled: !isFilled,\n    color: \"primary\",\n    style: {\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 54\n    }\n  }, isFilled ? \"Save My Prediction\" : \"Not Finished\")), viewId === undefined && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 50\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 28\n    }\n  }, \"Share Link\"), /*#__PURE__*/React.createElement(TextField, {\n    value: shareUrl,\n    style: {\n      width: '75%'\n    },\n    onClick: ev => {\n      ev.target.select();\n      document.execCommand('copy');\n      setCopied(true);\n      setTimeout(() => {\n        setCopied(false);\n      }, 1500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 28\n    }\n  })), viewId === undefined && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 50\n    }\n  }, copied ? \"Copied!\" : \"Click to copy to Clipboard\"), viewId !== undefined && canSave && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 61\n    }\n  }, \"This is \", username, \"'s prediction for the 2020 election, what's yours?  Give it a try yourself here!\", /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: `${baseUrl}/my_map`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 33\n    }\n  }, \"Predict the Election\")))) : viewId === undefined && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 45\n    }\n  }, \"It is November 3rd (Or after) and you can't update your prediction anymore.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, saveMessage)));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/WinUser/PycharmProjects/predictit2020/frontend/src/App.js"],"names":["React","USAMap","ELECTORAL_VOTES","Button","TextField","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","substring","decodeURIComponent","getParamsFromURL","paramsStr","parameters","forEach","part","item","App","props","loadingStatus","setLoadingStatus","useState","states","setStates","electoralVotes","setElectoralVotes","democrats","republicans","saveMessage","setSaveMessage","baseUrl","setBaseUrl","shareUrl","setShareUrl","copied","setCopied","username","setUsername","undefined","isFilled","Object","keys","console","log","today","Date","canSave","viewId","location","search","useEffect","fetchUserPrediction","res","fetch","status","raw_data","json","base_url","json_data","JSON","parse","prediction","id","user","ID","IDA","electoral_votes_dem","electoral_votes_rep","mapHandler","event","stateId","target","dataset","newStates","stringify","fill","position","marginTop","left","top","height","width","background","right","color","paddingTop","ev","method","mode","headers","body","select","execCommand","setTimeout"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport USAMap from \"react-usa-map\";\n\nimport ELECTORAL_VOTES from \"./electoral_votes\"\n\nimport {Button, TextField} from \"@material-ui/core\"\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i]\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(1, name.length + 1) === name) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 2));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nconst getParamsFromURL = (paramsStr) => {\n    let parameters = {}\n\n    if(paramsStr) paramsStr.split(\"?\")[1].split(\"&\").forEach(part => {\n        let item = part.split(\"=\")\n        parameters[item[0]] = decodeURIComponent(item[1])\n    })\n\n    return parameters\n\n}\n\n\n\nfunction App(props) {\n\n    const [loadingStatus, setLoadingStatus] = React.useState(0)\n    const [states, setStates] = React.useState({})\n    const [electoralVotes, setElectoralVotes] = React.useState({\n        democrats: 0,\n        republicans: 0,\n    })\n    const [saveMessage, setSaveMessage] = React.useState(\"\")\n    const [baseUrl, setBaseUrl] = React.useState(\"\")\n    const [shareUrl, setShareUrl] = React.useState(\"\")\n    const [copied, setCopied] = React.useState(false)\n    const [username, setUsername] = React.useState(undefined)\n\n  const isFilled = Object.keys(states).length == 51\n\n  console.log(Object.keys(states).length)\n\n  const today = new Date()\n  const canSave = today < new Date(2020, 10, 3)\n\n  const viewId = getParamsFromURL(props.location.search)['view_id']\n\n  React.useEffect(() => {\n    const fetchUserPrediction = async () => {\n        let res\n        if(!viewId) res = await fetch(`/load/`)\n        else res = await fetch(`/load/?view_id=${viewId}`)\n        if(res.status === 403) setLoadingStatus(2)\n        else {\n            const raw_data = await res.json()\n            const base_url = raw_data.base_url\n            setBaseUrl(base_url)\n            let json_data = JSON.parse(raw_data.prediction)\n            setShareUrl(`${base_url}/static/build/index.html?view_id=${json_data.id}`)\n\n            setUsername(raw_data.username)\n            delete json_data.username\n            delete json_data.id\n            delete json_data.user\n            json_data.ID = json_data.IDA\n            delete json_data.IDA\n            setElectoralVotes({democrats: json_data.electoral_votes_dem, republicans: json_data.electoral_votes_rep})\n            delete json_data.electoral_votes_dem\n            delete json_data.electoral_votes_rep\n            setStates(json_data)\n            setLoadingStatus(1)\n        }\n    }\n\n    fetchUserPrediction()\n  }, [])\n\n  const mapHandler = (event) => {\n    if(!viewId){\n        setSaveMessage(\"\")\n        const stateId = event.target.dataset.name == 'DC' ? 'DC2' : event.target.dataset.name\n        let newStates = JSON.parse(JSON.stringify(states))\n        if (stateId in newStates) {\n            if(newStates[stateId].fill === 'navy') {\n                newStates[stateId].fill = 'red'\n                setElectoralVotes({\n                    democrats: electoralVotes.democrats - ELECTORAL_VOTES[stateId],\n                    republicans: electoralVotes.republicans + ELECTORAL_VOTES[stateId],\n                })\n            }\n            else {\n                newStates[stateId].fill = 'navy'\n                setElectoralVotes({\n                    democrats: electoralVotes.democrats + ELECTORAL_VOTES[stateId],\n                    republicans: electoralVotes.republicans - ELECTORAL_VOTES[stateId],\n                })\n            }\n        } else {\n            newStates[stateId] = {'fill': 'navy'}\n            setElectoralVotes({...electoralVotes, democrats: electoralVotes.democrats + ELECTORAL_VOTES[stateId]})\n        }\n        setStates(newStates)\n    }\n  };\n  return (\n    <div className=\"App\">\n        {loadingStatus === 0 ? \"Loading\" : loadingStatus === 2 ? \"Not Logged in properly, or invalid ID, unable to load\" : loadingStatus === 1 && (\n            <>\n                <div style={{position: \"relative\", marginTop: '50px'}}>\n                    <div style={{position: \"absolute\", left: \"0px\" , top:\"10px\", height: '40px', width: `${electoralVotes.republicans / 538 * 100}%` , background: \"red\"}}></div>\n                    <div style={{position: \"absolute\", right: \"0px\" , top:\"10px\", height: '40px', width: `${electoralVotes.democrats / 538 * 100}%` , background: \"navy\"}}></div>\n                    <div style={{position: \"absolute\", left:\"5%\", top:\"0px\", color: '#999' }}>\n                        <h3>Republicans: {electoralVotes.republicans}</h3>\n                    </div>\n\n                    <div style={{position: \"absolute\", right:\"5%\", top:\"0px\", color: '#999'}}>\n                        <h3>Democrats: {electoralVotes.democrats}</h3>\n                    </div>\n                    {viewId !== undefined && (\n                    <div style={{paddingTop: '100px'}}>\n                        <h1>{username}'s map</h1>\n                    </div>\n                    )}\n                    <div style={{paddingTop: '100px'}}>\n                        <USAMap customize={states} onClick={mapHandler}  />\n                    </div>\n                </div>\n                {canSave ? (\n                    <>\n                        <div>\n                            {viewId === undefined && <Button\n                                onClick={async ev => {\n                                    const res = await fetch(`/save/`, {\n                                        method: 'POST',\n                                        mode: 'cors',\n                                        headers: {\n                                            'X-CSRFToken': getCookie(\"csrftoken\"),\n                                            'Content-Type': 'application/json',\n                                            'Accept': 'application/json'\n                                        },\n                                        body: JSON.stringify({states: states, electoralVotes: electoralVotes})\n                                    })\n                                    if(res.status === 200) setSaveMessage(\"Saved! You're all set! (You can modify it until November 3rd)\")\n                                    else setSaveMessage(\"Did not save properly!  Please try clicking save again\")\n                                }}\n                                variant=\"contained\" disabled={!isFilled} color=\"primary\" style={{marginTop: '50px'}}>\n                                {isFilled ? \"Save My Prediction\" : \"Not Finished\"}\n                            </Button>}\n                        </div>\n                        {viewId === undefined && <div style={{marginTop: '50px'}}>\n                           <p>Share Link</p>\n                           <TextField\n                            value={shareUrl}\n                            style={{width: '75%'}}\n                            onClick={ev => {\n                                ev.target.select()\n                                document.execCommand('copy')\n                                setCopied(true)\n                                setTimeout(()=> {\n                                    setCopied(false)\n                                }, 1500)\n                            }}\n                           />\n                        </div>}\n                        {viewId === undefined && <p>{copied ? \"Copied!\" : \"Click to copy to Clipboard\"}</p>}\n                        {viewId !== undefined && canSave && <div style={{marginTop: '50px'}}>\n                            This is {username}'s prediction for the 2020 election, what's yours?  Give it a try yourself here!\n                            <div>\n                                <a href={`${baseUrl}/my_map`}>\n                                    Predict the Election\n                                </a>\n                            </div>\n                        </div>}\n                    </>\n                ) : (\n                    viewId === undefined && <p>It is November 3rd (Or after) and you can't update your prediction anymore.</p>\n                )}\n\n                <p>{saveMessage}</p>\n            </>\n        )}\n\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}